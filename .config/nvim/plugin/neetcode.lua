local problems = {
  arraysAndHashing = {
    'Concatenation of Array',
    'Contains Duplicate',
    'Valid Anagram',
    'Two Sum',
    'Longest Common Prefix',
    'Group Anagrams',
    'Remove Element',
    'Majority Element',
    'Design HashSet',
    'Design HashMap',
    'Sort an Array',
    'Sort Colors',
    'Top K Frequent Elements',
    'Encode and Decode Strings',
    'Range Sum Query 2D Immutable',
    'Product of Array Except Self',
    'Valid Sudoku',
    'Longest Consecutive Sequence',
    'Best Time to Buy And Sell Stock II',
    'Majority Element II',
    'Subarray Sum Equals K',
    'First Missing Positive',
  },

  twoPointers = {
    'Reverse String',
    'Valid Palindrome',
    'Valid Palindrome II',
    'Merge Strings Alternately',
    'Merge Sorted Array',
    'Remove Duplicates From Sorted Array',
    'Two Sum II Input Array Is Sorted',
    '3Sum',
    '4Sum',
    'Rotate Array',
    'Container With Most Water',
    'Boats to Save People',
    'Trapping Rain Water',
  },

  slidingWindow = {
    'Contains Duplicate II',
    'Best Time to Buy And Sell Stock',
    'Longest Substring Without Repeating Characters',
    'Longest Repeating Character Replacement',
    'Permutation In String',
    'Minimum Size Subarray Sum',
    'Find K Closest Elements',
    'Minimum Window Substring',
    'Sliding Window Maximum',
  },
  stack = {
    'Baseball Game',
    'Valid Parentheses',
    'Implement Stack Using Queues',
    'Implement Queue using Stacks',
    'Min Stack',
    'Evaluate Reverse Polish Notation',
    'Generate Parentheses',
    'Asteroid Collision',
    'Daily Temperatures',
    'Online Stock Span',
    'Car Fleet',
    'Simplify Path',
    'Decode String',
    'Maximum Frequency Stack',
    'Largest Rectangle In Histogram',
  },

  binarySearch = {
    'Binary Search',
    'Search Insert Position',
    'Guess Number Higher Or Lower',
    'Sqrt(x)',
    'Search a 2D Matrix',
    'Koko Eating Bananas',
    'Capacity to Ship Packages',
    'Find Minimum In Rotated Sorted Array',
    'Search In Rotated Sorted Array',
    'Search In Rotated Sorted Array II',
    'Time Based Key Value Store',
    'Split Array Largest Sum',
    'Median of Two Sorted Arrays',
    'Find in Mountain Array',
  },
  linkedList = {
    'Reverse Linked List',
    'Merge Two Sorted Lists',
    'Linked List Cycle',
    'Reorder List',
    'Remove Nth Node From End of List',
    'Copy List With Random Pointer',
    'Add Two Numbers',
    'Find The Duplicate Number',
    'Reverse Linked List II',
    'Design Circular Queue',
    'LRU Cache',
    'LFU Cache',
    'Merge K Sorted Lists',
    'Reverse Nodes In K Group',
  },

  trees = {
    'Binary Tree Inorder Traversal',
    'Binary Tree Preorder Traversal',
    'Binary Tree Postorder Traversal',
    'Invert Binary Tree',
    'Maximum Depth of Binary Tree',
    'Diameter of Binary Tree',
    'Balanced Binary Tree',
    'Same Tree',
    'Subtree of Another Tree',
    'Lowest Common Ancestor of a Binary Search Tree',
    'Insert into a Binary Search Tree',
    'Delete Node in a BST',
    'Binary Tree Level Order Traversal',
    'Binary Tree Right Side View',
    'Construct Quad Tree',
    'Count Good Nodes In Binary Tree',
    'Validate Binary Search Tree',
    'Kth Smallest Element In a Bst',
    'Construct Binary Tree From Preorder And Inorder Traversal',
    'House Robber III',
    'Delete Leaves With a Given Value',
    'Binary Tree Maximum Path Sum',
    'Serialize And Deserialize Binary Tree',
  },
  heapOrPriorityQueue = {
    'Kth Largest Element In a Stream',
    'Last Stone Weight',
    'K Closest Points to Origin',
    'Kth Largest Element In An Array',
    'Task Scheduler',
    'Design Twitter',
    'Single Threaded CPU',
    'Reorganize String',
    'Longest Happy String',
    'Car Pooling',
    'Find Median From Data Stream',
    'IPO',
  },
  backtracking = {
    'Sum of All Subsets XOR Total',
    'Subsets',
    'Combination Sum',
    'Combination Sum II',
    'Combinations',
    'Permutations',
    'Subsets II',
    'Permutations II',
    'Word Search',
    'Palindrome Partitioning',
    'Letter Combinations of a Phone Number',
    'Matchsticks to Square',
    'Partition to K Equal Sum Subsets',
    'N Queens',
    'N Queens II',
    'Word Break II',
  },
  tries = {
    'Implement Trie Prefix Tree',
    'Design Add And Search Words Data Structure',
    'Extra Characters in a String',
    'Word Search II',
  },

  graphs = {
    'Island Perimeter',
    'Verifying An Alien Dictionary',
    'Find the Town Judge',
    'Number of Islands',
    'Max Area of Island',
    'Clone Graph',
    'Walls And Gates',
    'Rotting Oranges',
    'Pacific Atlantic Water Flow',
    'Surrounded Regions',
    'Open The Lock',
    'Course Schedule',
    'Course Schedule II',
    'Graph Valid Tree',
    'Course Schedule IV',
    'Number of Connected Components In An Undirected Graph',
    'Redundant Connection',
    'Accounts Merge',
    'Evaluate Division',
    'Minimum Height Trees',
    'Word Ladder',
  },
  advancedGraphs = {
    'Path with Minimum Effort',
    'Network Delay Time',
    'Reconstruct Itinerary',
    'Min Cost to Connect All Points',
    'Swim In Rising Water',
    'Alien Dictionary',
    'Cheapest Flights Within K Stops',
    'Find Critical and Pseudo Critical Edges in Minimum Spanning Tree',
    'Build a Matrix With Conditions',
    'Greatest Common Divisor Traversal',
  },
  oneDimensionalDynamicProgramming = {
    'Climbing Stairs',
    'Min Cost Climbing Stairs',
    'N-th Tribonacci Number',
    'House Robber',
    'House Robber II',
    'Longest Palindromic Substring',
    'Palindromic Substrings',
    'Decode Ways',
    'Coin Change',
    'Maximum Product Subarray',
    'Word Break',
    'Longest Increasing Subsequence',
    'Partition Equal Subset Sum',
    'Combination Sum IV',
    'Perfect Squares',
    'Integer Break',
    'Stone Game III',
  },
  twoDimensionalDynamicProgramming = {
    'Unique Paths',
    'Unique Paths II',
    'Minimum Path Sum',
    'Longest Common Subsequence',
    'Last Stone Weight II',
    'Best Time to Buy And Sell Stock With Cooldown',
    'Coin Change II',
    'Target Sum',
    'Interleaving String',
    'Stone Game',
    'Stone Game II',
    'Longest Increasing Path In a Matrix',
    'Distinct Subsequences',
    'Edit Distance',
    'Burst Balloons',
    'Regular Expression Matching',
  },

  greedy = {
    'Lemonade Change',
    'Maximum Subarray',
    'Maximum Sum Circular Subarray',
    'Longest Turbulent Array',
    'Jump Game',
    'Jump Game II',
    'Jump Game VII',
    'Gas Station',
    'Hand of Straights',
    'Dota2 Senate',
    'Merge Triplets to Form Target Triplet',
    'Partition Labels',
    'Valid Parenthesis String',
    'Candy',
  },
  intervals = {
    'Insert Interval',
    'Merge Intervals',
    'Non Overlapping Intervals',
    'Meeting Rooms',
    'Meeting Rooms II',
    'Meeting Rooms III',
    'Minimum Interval to Include Each Query',
  },
  mathAndGeometry = {
    'Excel Sheet Column Title',
    'Greatest Common Divisor of Strings',
    'Insert Greatest Common Divisors in Linked List',
    'Transpose Matrix',
    'Rotate Image',
    'Spiral Matrix',
    'Set Matrix Zeroes',
    'Happy Number',
    'Plus One',
    'Roman to Integer',
    'Pow(x, n)',
    'Multiply',
    'Detect Squares',
  },
  bitManipulation = {
    'Single Number',
    'Number of 1 Bits',
    'Counting Bits',
    'Add Binary',
    'Reverse Bits',
    'Missing Number',
    'Sum of Two Integers',
    'Reverse Integer',
    'Bitwise AND of Numbers Range',
    'Minimum Array End',
  },
}

local randomize_problem = function(command)
  local keyset = {}
  for k in pairs(problems) do
    table.insert(keyset, k)
  end
  local type = problems[keyset[math.random(#keyset)]]
  print(type[math.random(#type)])
end

local complete = function()
end

vim.api.nvim_create_user_command('Neet', randomize_problem, {})
